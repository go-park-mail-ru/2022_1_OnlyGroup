// Code generated by MockGen. DO NOT EDIT.
// Source: app/repositories/users.go

// Package mock_repositories is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthRepository is a mock of AuthRepository interface.
type MockAuthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthRepositoryMockRecorder
}

// MockAuthRepositoryMockRecorder is the mock recorder for MockAuthRepository.
type MockAuthRepositoryMockRecorder struct {
	mock *MockAuthRepository
}

// NewMockAuthRepository creates a new mock instance.
func NewMockAuthRepository(ctrl *gomock.Controller) *MockAuthRepository {
	mock := &MockAuthRepository{ctrl: ctrl}
	mock.recorder = &MockAuthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthRepository) EXPECT() *MockAuthRepositoryMockRecorder {
	return m.recorder
}

// AddSession mocks base method.
func (m *MockAuthRepository) AddSession(id int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSession", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSession indicates an expected call of AddSession.
func (mr *MockAuthRepositoryMockRecorder) AddSession(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSession", reflect.TypeOf((*MockAuthRepository)(nil).AddSession), id)
}

// AddUser mocks base method.
func (m *MockAuthRepository) AddUser(email, password string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", email, password)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockAuthRepositoryMockRecorder) AddUser(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockAuthRepository)(nil).AddUser), email, password)
}

// Authorize mocks base method.
func (m *MockAuthRepository) Authorize(email, password string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authorize", email, password)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Authorize indicates an expected call of Authorize.
func (mr *MockAuthRepositoryMockRecorder) Authorize(email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authorize", reflect.TypeOf((*MockAuthRepository)(nil).Authorize), email, password)
}

// ChangePassword mocks base method.
func (m *MockAuthRepository) ChangePassword(id int, newPassword string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangePassword", id, newPassword)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangePassword indicates an expected call of ChangePassword.
func (mr *MockAuthRepositoryMockRecorder) ChangePassword(id, newPassword interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangePassword", reflect.TypeOf((*MockAuthRepository)(nil).ChangePassword), id, newPassword)
}

// GetIdBySession mocks base method.
func (m *MockAuthRepository) GetIdBySession(secret string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdBySession", secret)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdBySession indicates an expected call of GetIdBySession.
func (mr *MockAuthRepositoryMockRecorder) GetIdBySession(secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdBySession", reflect.TypeOf((*MockAuthRepository)(nil).GetIdBySession), secret)
}

// RemoveSession mocks base method.
func (m *MockAuthRepository) RemoveSession(secret string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveSession", secret)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSession indicates an expected call of RemoveSession.
func (mr *MockAuthRepositoryMockRecorder) RemoveSession(secret interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSession", reflect.TypeOf((*MockAuthRepository)(nil).RemoveSession), secret)
}
