// Code generated by MockGen. DO NOT EDIT.
// Source: app/usecases/auth.go

// Package mock_usecases is a generated GoMock package.
package mocks

import (
	models "2022_1_OnlyGroup_back/app/models"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAuthUseCases is a mock of AuthUseCases interface.
type MockAuthUseCases struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUseCasesMockRecorder
}

// MockAuthUseCasesMockRecorder is the mock recorder for MockAuthUseCases.
type MockAuthUseCasesMockRecorder struct {
	mock *MockAuthUseCases
}

// NewMockAuthUseCases creates a new mock instance.
func NewMockAuthUseCases(ctrl *gomock.Controller) *MockAuthUseCases {
	mock := &MockAuthUseCases{ctrl: ctrl}
	mock.recorder = &MockAuthUseCasesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthUseCases) EXPECT() *MockAuthUseCasesMockRecorder {
	return m.recorder
}

// UserAuth mocks base method.
func (m *MockAuthUseCases) UserAuth(Cookie string) (models.UserID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAuth", Cookie)
	ret0, _ := ret[0].(models.UserID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserAuth indicates an expected call of UserAuth.
func (mr *MockAuthUseCasesMockRecorder) UserAuth(Cookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAuth", reflect.TypeOf((*MockAuthUseCases)(nil).UserAuth), Cookie)
}

// UserChangePassword mocks base method.
func (m *MockAuthUseCases) UserChangePassword(userProfile models.UserAuthProfile, Cookie string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserChangePassword", userProfile, Cookie)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserChangePassword indicates an expected call of UserChangePassword.
func (mr *MockAuthUseCasesMockRecorder) UserChangePassword(userProfile, Cookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserChangePassword", reflect.TypeOf((*MockAuthUseCases)(nil).UserChangePassword), userProfile, Cookie)
}

// UserLogin mocks base method.
func (m *MockAuthUseCases) UserLogin(userInfo models.UserAuthInfo) (models.UserID, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLogin", userInfo)
	ret0, _ := ret[0].(models.UserID)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockAuthUseCasesMockRecorder) UserLogin(userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockAuthUseCases)(nil).UserLogin), userInfo)
}

// UserLogout mocks base method.
func (m *MockAuthUseCases) UserLogout(Cookie string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLogout", Cookie)
	ret0, _ := ret[0].(error)
	return ret0
}

// UserLogout indicates an expected call of UserLogout.
func (mr *MockAuthUseCasesMockRecorder) UserLogout(Cookie interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogout", reflect.TypeOf((*MockAuthUseCases)(nil).UserLogout), Cookie)
}

// UserRegister mocks base method.
func (m *MockAuthUseCases) UserRegister(userInfo models.UserAuthInfo) (models.UserID, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRegister", userInfo)
	ret0, _ := ret[0].(models.UserID)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UserRegister indicates an expected call of UserRegister.
func (mr *MockAuthUseCasesMockRecorder) UserRegister(userInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRegister", reflect.TypeOf((*MockAuthUseCases)(nil).UserRegister), userInfo)
}
