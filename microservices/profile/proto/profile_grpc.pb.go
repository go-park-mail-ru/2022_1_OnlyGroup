// Code generated by protoc-gen-go-implGrpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-implGrpc v1.2.0
// - protoc             v3.20.1
// source: profile.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProfileRepositoryClient is the client API for ProfileRepository service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProfileRepositoryClient interface {
	Get(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Profile, error)
	GetShort(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*ShortProfile, error)
	Change(ctx context.Context, in *Profile, opts ...grpc.CallOption) (*Nothing, error)
	Delete(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Nothing, error)
	Add(ctx context.Context, in *Profile, opts ...grpc.CallOption) (*Nothing, error)
	CheckFiled(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Nothing, error)
	AddEmpty(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Nothing, error)
	FindCandidate(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*VectorCandidate, error)
	GetFilters(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Filters, error)
	ChangeFilters(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Nothing, error)
	GetInterests(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Interests, error)
	GetDynamicInterest(ctx context.Context, in *StrInterest, opts ...grpc.CallOption) (*Interests, error)
	SetAction(ctx context.Context, in *Likes, opts ...grpc.CallOption) (*Nothing, error)
	GetMatched(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*LikesMatched, error)
}

type profileRepositoryClient struct {
	cc grpc.ClientConnInterface
}

func NewProfileRepositoryClient(cc grpc.ClientConnInterface) ProfileRepositoryClient {
	return &profileRepositoryClient{cc}
}

func (c *profileRepositoryClient) Get(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Profile, error) {
	out := new(Profile)
	err := c.cc.Invoke(ctx, "/profile.ProfileRepository/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileRepositoryClient) GetShort(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*ShortProfile, error) {
	out := new(ShortProfile)
	err := c.cc.Invoke(ctx, "/profile.ProfileRepository/GetShort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileRepositoryClient) Change(ctx context.Context, in *Profile, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/profile.ProfileRepository/Change", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileRepositoryClient) Delete(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/profile.ProfileRepository/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileRepositoryClient) Add(ctx context.Context, in *Profile, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/profile.ProfileRepository/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileRepositoryClient) CheckFiled(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/profile.ProfileRepository/CheckFiled", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileRepositoryClient) AddEmpty(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/profile.ProfileRepository/AddEmpty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileRepositoryClient) FindCandidate(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*VectorCandidate, error) {
	out := new(VectorCandidate)
	err := c.cc.Invoke(ctx, "/profile.ProfileRepository/FindCandidate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileRepositoryClient) GetFilters(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*Filters, error) {
	out := new(Filters)
	err := c.cc.Invoke(ctx, "/profile.ProfileRepository/GetFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileRepositoryClient) ChangeFilters(ctx context.Context, in *Filters, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/profile.ProfileRepository/ChangeFilters", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileRepositoryClient) GetInterests(ctx context.Context, in *Nothing, opts ...grpc.CallOption) (*Interests, error) {
	out := new(Interests)
	err := c.cc.Invoke(ctx, "/profile.ProfileRepository/GetInterests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileRepositoryClient) GetDynamicInterest(ctx context.Context, in *StrInterest, opts ...grpc.CallOption) (*Interests, error) {
	out := new(Interests)
	err := c.cc.Invoke(ctx, "/profile.ProfileRepository/GetDynamicInterest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileRepositoryClient) SetAction(ctx context.Context, in *Likes, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/profile.ProfileRepository/SetAction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *profileRepositoryClient) GetMatched(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*LikesMatched, error) {
	out := new(LikesMatched)
	err := c.cc.Invoke(ctx, "/profile.ProfileRepository/GetMatched", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProfileRepositoryServer is the server API for ProfileRepository service.
// All implementations should embed UnimplementedProfileRepositoryServer
// for forward compatibility
type ProfileRepositoryServer interface {
	Get(context.Context, *UserID) (*Profile, error)
	GetShort(context.Context, *UserID) (*ShortProfile, error)
	Change(context.Context, *Profile) (*Nothing, error)
	Delete(context.Context, *UserID) (*Nothing, error)
	Add(context.Context, *Profile) (*Nothing, error)
	CheckFiled(context.Context, *UserID) (*Nothing, error)
	AddEmpty(context.Context, *UserID) (*Nothing, error)
	FindCandidate(context.Context, *UserID) (*VectorCandidate, error)
	GetFilters(context.Context, *UserID) (*Filters, error)
	ChangeFilters(context.Context, *Filters) (*Nothing, error)
	GetInterests(context.Context, *Nothing) (*Interests, error)
	GetDynamicInterest(context.Context, *StrInterest) (*Interests, error)
	SetAction(context.Context, *Likes) (*Nothing, error)
	GetMatched(context.Context, *UserID) (*LikesMatched, error)
}

// UnimplementedProfileRepositoryServer should be embedded to have forward compatible implementations.
type UnimplementedProfileRepositoryServer struct {
}

func (UnimplementedProfileRepositoryServer) Get(context.Context, *UserID) (*Profile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedProfileRepositoryServer) GetShort(context.Context, *UserID) (*ShortProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShort not implemented")
}
func (UnimplementedProfileRepositoryServer) Change(context.Context, *Profile) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Change not implemented")
}
func (UnimplementedProfileRepositoryServer) Delete(context.Context, *UserID) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedProfileRepositoryServer) Add(context.Context, *Profile) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedProfileRepositoryServer) CheckFiled(context.Context, *UserID) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckFiled not implemented")
}
func (UnimplementedProfileRepositoryServer) AddEmpty(context.Context, *UserID) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEmpty not implemented")
}
func (UnimplementedProfileRepositoryServer) FindCandidate(context.Context, *UserID) (*VectorCandidate, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindCandidate not implemented")
}
func (UnimplementedProfileRepositoryServer) GetFilters(context.Context, *UserID) (*Filters, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFilters not implemented")
}
func (UnimplementedProfileRepositoryServer) ChangeFilters(context.Context, *Filters) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeFilters not implemented")
}
func (UnimplementedProfileRepositoryServer) GetInterests(context.Context, *Nothing) (*Interests, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInterests not implemented")
}
func (UnimplementedProfileRepositoryServer) GetDynamicInterest(context.Context, *StrInterest) (*Interests, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDynamicInterest not implemented")
}
func (UnimplementedProfileRepositoryServer) SetAction(context.Context, *Likes) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetAction not implemented")
}
func (UnimplementedProfileRepositoryServer) GetMatched(context.Context, *UserID) (*LikesMatched, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMatched not implemented")
}

// UnsafeProfileRepositoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProfileRepositoryServer will
// result in compilation errors.
type UnsafeProfileRepositoryServer interface {
	mustEmbedUnimplementedProfileRepositoryServer()
}

func RegisterProfileRepositoryServer(s grpc.ServiceRegistrar, srv ProfileRepositoryServer) {
	s.RegisterService(&ProfileRepository_ServiceDesc, srv)
}

func _ProfileRepository_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileRepositoryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileRepository/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileRepositoryServer).Get(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileRepository_GetShort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileRepositoryServer).GetShort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileRepository/GetShort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileRepositoryServer).GetShort(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileRepository_Change_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Profile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileRepositoryServer).Change(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileRepository/Change",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileRepositoryServer).Change(ctx, req.(*Profile))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileRepository_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileRepositoryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileRepository/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileRepositoryServer).Delete(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileRepository_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Profile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileRepositoryServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileRepository/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileRepositoryServer).Add(ctx, req.(*Profile))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileRepository_CheckFiled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileRepositoryServer).CheckFiled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileRepository/CheckFiled",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileRepositoryServer).CheckFiled(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileRepository_AddEmpty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileRepositoryServer).AddEmpty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileRepository/AddEmpty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileRepositoryServer).AddEmpty(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileRepository_FindCandidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileRepositoryServer).FindCandidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileRepository/FindCandidate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileRepositoryServer).FindCandidate(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileRepository_GetFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileRepositoryServer).GetFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileRepository/GetFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileRepositoryServer).GetFilters(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileRepository_ChangeFilters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Filters)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileRepositoryServer).ChangeFilters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileRepository/ChangeFilters",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileRepositoryServer).ChangeFilters(ctx, req.(*Filters))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileRepository_GetInterests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Nothing)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileRepositoryServer).GetInterests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileRepository/GetInterests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileRepositoryServer).GetInterests(ctx, req.(*Nothing))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileRepository_GetDynamicInterest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StrInterest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileRepositoryServer).GetDynamicInterest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileRepository/GetDynamicInterest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileRepositoryServer).GetDynamicInterest(ctx, req.(*StrInterest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileRepository_SetAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Likes)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileRepositoryServer).SetAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileRepository/SetAction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileRepositoryServer).SetAction(ctx, req.(*Likes))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProfileRepository_GetMatched_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProfileRepositoryServer).GetMatched(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/profile.ProfileRepository/GetMatched",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProfileRepositoryServer).GetMatched(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

// ProfileRepository_ServiceDesc is the grpc.ServiceDesc for ProfileRepository service.
// It's only intended for direct use with implGrpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProfileRepository_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "profile.ProfileRepository",
	HandlerType: (*ProfileRepositoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ProfileRepository_Get_Handler,
		},
		{
			MethodName: "GetShort",
			Handler:    _ProfileRepository_GetShort_Handler,
		},
		{
			MethodName: "Change",
			Handler:    _ProfileRepository_Change_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ProfileRepository_Delete_Handler,
		},
		{
			MethodName: "Add",
			Handler:    _ProfileRepository_Add_Handler,
		},
		{
			MethodName: "CheckFiled",
			Handler:    _ProfileRepository_CheckFiled_Handler,
		},
		{
			MethodName: "AddEmpty",
			Handler:    _ProfileRepository_AddEmpty_Handler,
		},
		{
			MethodName: "FindCandidate",
			Handler:    _ProfileRepository_FindCandidate_Handler,
		},
		{
			MethodName: "GetFilters",
			Handler:    _ProfileRepository_GetFilters_Handler,
		},
		{
			MethodName: "ChangeFilters",
			Handler:    _ProfileRepository_ChangeFilters_Handler,
		},
		{
			MethodName: "GetInterests",
			Handler:    _ProfileRepository_GetInterests_Handler,
		},
		{
			MethodName: "GetDynamicInterest",
			Handler:    _ProfileRepository_GetDynamicInterest_Handler,
		},
		{
			MethodName: "SetAction",
			Handler:    _ProfileRepository_SetAction_Handler,
		},
		{
			MethodName: "GetMatched",
			Handler:    _ProfileRepository_GetMatched_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "profile.proto",
}
